> * 인터페이스 : 동일한 목적 하의 서로 다른 기능(Override)을 수행하기 위한 통합
> * 구현(객)체 : 해당 인터페이스를 구현(implements)한 클래스로 객체 생성
> Collection FrameWork
    > 컬렉션(수집), 프레임워크(미리 만들어진 틀)
    > 자료를 수집하는 방법을 미리 만들어 둔 인터페이스 /
    > 복잡한 자료구조를 제공받는다.
> Collection
    > 1. List 인터페이스
        > 공통점 : 저장된 순서(인덱스)를 이용한 데이터 관리, 데이터 중복 허용
        > 1) ArrayList 클래스
            > 객체 선언 방법
            List<제네릭 타입> 변수명 = new ArrayList<>();
            ArrayList<제네릭 타입> 변수명 = new ArrayList<>();

            > 제네릭 타입 : 리스트 객체에 저장할 요소들의 타입
            > 자주 사용되는 메소드
                > [1] .add(요소)               : 리스트 내 요소 추가
                > [2] .set(인덱스, 요소)        : 리스트 내 특정 인덱스에 요소 변경
                > [3] .size()                 : 리스트의 요소 갯수 반환
                > [4] .get(인덱스)             : 리스트 내 특정 인덱스의 요소 값 반환
                > [5] .contains("값" or 객체)  : 리스트 내 특정 값 또는 객체를 검색하여 존재하면 true 없으면 false 반환
                > [6] .indexOf("값" or 객체)   : 리스트 내 특정 값 또는 객체를 검색하여 존재하면 인덱스 없으면 -1 반환
                > [7] .remove(인덱스 or 객체)   : 리스트 내 특정 인덱스 또는 객체가 존재하면 그 요소 삭제
                > [8] .clear()                : 리스트 내 전체 요소 삭제
                > [9] .isEmpty()              : 리스트 내 요소가 하나도 없다면 true, 1개 이상이면 false
        > 2) Vector 클래스
            > List 인터페이스에 동기화가 추가된 클래스
            > 멀티 thread 구현 시 사용

        > 3) LinkedList 클래스
            > 중간 삽입 / 삭제 사용 시 ArrayList 보다 좋은 성능을 가진다.

    > 2. Set 인터페이스
        > 공통점 : 저장된 순서(인덱스)가 없어서 데이터 중복 허용 X
        > 1) HashSet 클래스
            > 자주 사용되는 메소드
                > [1] .add(요소)              : set 객체 내 요소 추가
                > [2] .size()                : set 객체 내 요소 총 개수
                > [3] .remove(요소)           : set 객체 내 동일한 요소가 있다면 삭제
                > [4] .contains(요소)         : set 객체 내 동일한 요소가 존재하면 true, 없다면 false 반환.
                > [5] .clear()               : set 객체 내 전체 요소 삭제
                > [6] .isEmpty()             : set 객체 내 요소가 하나도 없다면 true, 1개 이상이면 false
                > [7] .iterator()            : 반복자 인터페이스 반환
                > [8] .hashNext()            : 다음 요소가 존재하면 true, 아니면 false 반환
                > [9] .next()                : 다음 요소 호출

            > set 인터페이스가 중복을 제거하는 방법 : 객체의 주소값을 비교해서 동일한 주소값은 저장하지 않는다.
                > 리터럴 제외한 객체들을 중복 제거
                    > 1) hashCode() 재정의
                        > @Override
                              public int hashCode() {
                                  return 중복 비교 기준의 필드
                              }

                    > 2) equals() 재정의
                        > @Override
                              public boolean equals(Object obj) {
                                  if(obj instanceof 클래스명){
                                      클래스명 변수명 = (클래스명) obj;
                                      if(this.중복 비교 기준의 필드 == 변수명.중복 비교 기준의 필드){
                                          return true;
                                      }else{
                                          return false;
                                      }
                                  }
                                  return false;
                              }

    > 3. Map 인터페이스
        > 공통점 : 저장된 순서(인덱스)가 없고, key-value 로 이루어진 한 쌍(엔트리)
        > key : 중복 불가능, value : 중복 가능
        > 1) HashMap 클래스
            > 자주 사용되는 메소드
                > [1] .put(key, value)      : key 와 value 엔트리 추가
                > [2] .size()               : map 객체 내 엔트리 갯수
                > [3] .get(key)             : map 객체 내 key 해당하는 value 반환
                > [4] .remove(key)          : map 객체 내 해당하는 key 가 있다면 그 엔트리를 삭제
                > [5] .clear()              : map 객체 내 전체 엔트리 삭제
                > [6] .isEmpty()            : map 객체 내 엔트리가 존재하지 않으면 true, 하나라도 존재하면 false
                > [7] .keySet()             : map 객체 내 모든 key 값 반환(Set 인터페이스로)
                > [8] .values()             : map 객체 내 모든 value 값 반환 (Collection 인터페이스로)
                > [9] .entrySet()           : map 객체 내 모든 entry 반환(Set (Map.Entry)인터페이스로)

> 자료 구조
    > 컴퓨터 과학에서 효율적인 자료의 관리, 저장, 조직하는 방법
    > Why? 특정 상황 기준의 자료들을 정리해두면 검색, 정렬, 통계에 유용하다.
    > ex) 리스트, 스택, 큐, 트리, 그래프 등등
    > 사용처 : 프레임워크(JAVA 기준), 기술 면접(코딩 테스트, 과제형 테스트)

> 스택, 큐
    > 1. 스택
        > 데이터를 저장하는 선형 자료구조
            > Last In First Out : (LIFO)원칙, 후입선출 -> 마지막에 들어온 자료가 가장 먼저 나간다. 입구 / 출구가 하나로 동일하다
            > ex) 동전케이스, 프링글스 과자, 뒤로 가기 기능, 재귀 알고리즘 등
                > 용어
                    > 1) PUSH   : 스택 구조에 데이터를 추가하는 연산, 새로운 데이터는 항상 스택 구조의 맨 위에 위치한다.
                    > 2) POP    : 스택 구조에 데이터를 제거하고 반환하는 연산, 가장 최근에 추가된 데이터가 반환된다.
                    > 3) TOP    : 가장 최근에 추가한 자료의 위치
                    > 4) PEEK   : 스택 구조의 맨 위에 있는 데이터를 반환 연산, 제거는 하지 않는다, 스택 구조의 최상위 데이터 확인 용도

        > Stack 클래스
            > Vector 클래스 기반으로 만들어진 클래스
            > 주요 메소드
                > 1) push()
                > 2) pop()
                > 3) peek()

    > 2. 큐
        > 데이터를 저장하는 선형 자료구조
            > First In First Out : (FIFO)원칙, 선입선출 -> 먼저 들어온 자료가 가장 먼저 나간다. 입구 / 출구가 별도로 존재한다.
            > ex) 선착순 줄서기, 프린터 기능, BFS 알고리즘 등
                > 용어
                    > 1) ENQUEUE : 큐에 대이터를 추가하는 연산, 새로운 데이터는 항상 큐의 맨 뒤에 추가된다.
                    > 2) DEQUEUE : 큐에 데이터를 제거하고 반환하는 연산, 가장 처음에 추가된 데이터가 제거된다
                    > 3) PEEK    : 큐의 맨 앞에 있는 데이터 반환, 제거하지는 않고 첫번째 데이터 확인용

        > JAVA 제공 : QUEUE 인터페이스
            > LinkedList 클래스의 구현체를 필요로 한다.
                > 주요 메소드
                    > 1) offer()
                    > 2) poll()
                    > 3) peek()

> 이진 트리
    > 데이터를 저장하는 비선형 자료 구조(앞 / 뒤 데이터가 1 : N 관계)
    > 각 노드가 최대 2개의 자식 노드를 가질 수 있는 트리 구조
    > 왼쪽 자식 노드의 데이터는 부모 노드보다 항상 작다. 오른쪽 자식 노드의 데이터는 부모 노드보다 항상 크다.
    > ex) 데이터 검색, 정렬, 파일 시스템 등등에 사용됨
    > 데이터의 오름차순으로 자동 정렬을 제공 -> 내림차순은 descendingSet() 메소드 사용하면 구현 가능
        > 용어
            > 1) 노드 : 자료(데이터)가 들어가는 공간
                > 1-1) 부모 노드 : 특정 노드의 바로 위 노드
                > 1-2) 자식 노드 : 특정 노드의 바로 아래에 있는 노드들, 이진 트리에서는 최대 2개를 가질 수 있다.
                > 1-3) 루트 노드 : 트리의 맨 위에 있는 노드로, 루트 노드는 시작하는 경로를 통해 접근한다.

            > 2) 깊이 : 루트 노드에서 특정 노드까지의 그 경로의 길이
            > 3) 높이 : 트리의 최대 깊이, 가장 깊은 노드의 길이

    > JAVA 제공 : TreeSet 클래스, TreeMap 클래스
        > TreeSet 클래스로 객체 구현해서 사용
        > TreeSet Generic 에는 Comparable / Comparator 인터페이스를 구현한 클래스만 사용 가능하다.
            > 주요 메소드
                > set 메소드와 동일
                    > 1) first()
                    > 2) last()
                    > 3) lower(데이터)
                    > 4) higher(데이터)
                    > 5) floor(데이터)
                    > 6) ceiling(데이터)
                    > 7) descendingSet() -> 내림차순 변경
                    > 8) tailSet(데이터, true or false)
                    > 9) headSet(데이터, true or false)
                    > 10) subSet(데이터, true or false, 데이터, true or false)

        > TreeMap 클래스로 객체 구현해서도 사용 가능
        > key 의 Generic 에는 Comparable / Comparator 인터페이스를 구현한 클래스만 사용 가능하다.
            > 주요 메소드
                > Map 메소드와 동일
                     > 1) firstEntry()
                     > 2) lastEntry()
                     > 3) lowerEntry(데이터)
                     > 4) higherEntry(데이터)
                     > 5) floorEntry(데이터)
                     > 6) ceilingEntry(데이터)
                     > 7) descendingMap() -> 내림차순 변경
                     > 8) tailMap(데이터, true or false)
                     > 9) headMap(데이터, true or false)
                     > 10) subMap(데이터, true or false, 데이터, true or false)

    > 정렬 기준
        > Comparable 인터페이스, Comparator 인터페이스
        > TreeSet<Generic>, TreeMap<Generic> 사용해서 Tree 자료구조를 구현한다.
        > Generic 에 들어가는 타입 중에 Integer, Double, String 등등이 들어간다.
            > JAVA 에서 제공하는 몇몇 클래스에는 이미 Comparable 이 구현된 상태이다. 주로 리터럴 자료 타입
            > 개인이 직접 만든 클래스는 Comparable 이 구현되지 않은 상태라 Generic 으로 사용 시 자동 정렬이 불가능하다.
            > 그래서 정렬하고 싶다면 Comparable 을 구현해야한다.
                > 1) implements Comparable<클래스명>
                > 2) @Override public int comparable(클래스 o){}


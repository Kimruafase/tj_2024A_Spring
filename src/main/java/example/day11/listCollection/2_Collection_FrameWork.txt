> * 인터페이스 : 동일한 목적 하의 서로 다른 기능(Override)을 수행하기 위한 통합
> * 구현(객)체 : 해당 인터페이스를 구현(implements)한 클래스로 객체 생성
> Collection
    > 1. List 인터페이스
        > 공통점 : 저장된 순서(인덱스)를 이용한 데이터 관리, 데이터 중복 허용
        > 1) ArrayList 클래스
            > 객체 선언 방법
            List<제네릭 타입> 변수명 = new ArrayList<>();
            ArrayList<제네릭 타입> 변수명 = new ArrayList<>();

            > 제네릭 타입 : 리스트 객체에 저장할 요소들의 타입
            > 자주 사용되는 메소드
                > [1] .add(요소)               : 리스트 내 요소 추가
                > [2] .set(인덱스, 요소)        : 리스트 내 특정 인덱스에 요소 변경
                > [3] .size()                 : 리스트의 요소 갯수 반환
                > [4] .get(인덱스)             : 리스트 내 특정 인덱스의 요소 값 반환
                > [5] .contains("값" or 객체)  : 리스트 내 특정 값 또는 객체를 검색하여 존재하면 true 없으면 false 반환
                > [6] .indexOf("값" or 객체)   : 리스트 내 특정 값 또는 객체를 검색하여 존재하면 인덱스 없으면 -1 반환
                > [7] .remove(인덱스 or 객체)   : 리스트 내 특정 인덱스 또는 객체가 존재하면 그 요소 삭제
                > [8] .clear()                : 리스트 내 전체 요소 삭제
                > [9] .isEmpty()              : 리스트 내 요소가 하나도 없다면 true, 1개 이상이면 false
        > 2) Vector 클래스
            > List 인터페이스에 동기화가 추가된 클래스
            > 멀티 thread 구현 시 사용

        > 3) LinkedList 클래스
            > 중간 삽입 / 삭제 사용 시 ArrayList 보다 좋은 성능을 가진다.

    > 2. Set 인터페이스

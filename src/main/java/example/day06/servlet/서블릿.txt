HTTP : 하이퍼 텍스트 트랜스퍼 프로토콜
    > 하이퍼 텍스트 : 이동이 가능한 텍스트 / 문자
    > 트랜스퍼(전송) : 통신, 주고 받기
    > 프로토콜 : 규약, 규칙, 법
    > 통신 방식 / 메소드 : 주어진 리소스(자료)에 수행하길 원하는 행위 / 메소드
        > POST(보낼 때 / 저장(C)), GET(받을 때 / 조회(R)), PUT(보낼 때 / 수정(U)), DELETE(삭제할 때 / 삭제(D))
            > 관례적으로 사용되고 가독성을 위해 구분해서 사용, 만일 GET 으로 CRUD 구현한다고 하면 가능하다.
        > 차이점 : 멱등성, 캐시

서블릿 : JAVA 를 사용해서 웹 페이지를 동적으로 생성하는 서버 측의 프로그램
    > 웹 서버의 성능을 향상시키기 위해 사용되는 일종의 클래스
    > 즉 JAVA 회사에서 웹 개발을 하기 위한 웹 관련 클래스를 제공한다.
    > 서블릿 사용 방법
        > 1. 해당 클래스에 extends HttpServlet -> String 클래스와 동일
        > 2. 외부로부터 해당 클래스를 연결 / 매핑할 수 있도록 HTTP URL(온라인, 인터넷 웹 주소) 정의
            > 해당 클래스에 @(어노테이션)WebServlet("/URL") 이용
        > 3. HttpServlet 의 다양한 메소드 제공, 웹 서버 -> 톰캣 -> AWS
            > init()        : (최초 서블릿 요청 시 1번) 웹 서버 내 해당 클래스가 서블릿 객체를 생성할 때 실행되는 메소드 / 함수
            > service()     : (요청이 들어올 때 마다) HTTP 를 이용한 웹 서버로 부터 요청이 들어올 때 실행되는 함수
            > destroy()     : (웹 서버 종료 시 1번) 웹 서버 내 해당 클래스의 서블릿 객체가 초기화될 때 실행되는 함수
            > doGet()       : (HTTP GET 요청) HTTP 를 이용한 웹 서버로 부터 요청이 들어올 때 HTTP 의 메소드가 GET 이면 호출되는 함수
            > doPost()      : (HTTP POST 요청) HTTP 를 이용한 웹 서버로 부터 요청이 들어올 때 HTTP 의 메소드가 POST 이면 호출되는 함수
            > doPut()       : (HTTP PUT 요청) HTTP 를 이용한 웹 서버로 부터 요청이 들어올 때 HTTP 의 메소드가 PUT 이면 호출되는 함수
            > doDelete()    : (HTTP DELETE 요청) HTTP 를 이용한 웹 서버로 부터 요청이 들어올 때 HTTP 의 메소드가 DELETE 이면 호출되는 함수

        > 4. HTTP 요청의 자료 / 데이터 주고 받기
            > http://ip 주소:port 번호/서블릿주소?key=value
                > 쿼리스트링 : url?key=value&key=value&key=value
            > 1. HttpServletRequest     : 클라이언트로부터 요청 받을 때 요청 정보를 갖는 클래스
                > 메소드
                    > getParameter("key")   : 해당하는 key 의 value 의 데이터를 문자열 타입 반환
            > 2. HttpServletResponse    : 클라이언트로부터 응답 보낼 때 응답 정보를 갖는 클래스
                > 메소드
                    > .getWriter().print("value") : 해당하는 value 를 요청을 보낸 클라이언트에게 응답한 값을 보낸다.

브라우저 : 크롬, 엣지, 사파리 등등 웹 서비스를 사용할 수 있게 만든 웹 프로그램
    > 브라우저 프로그램 상단에 웹 주소 입력 창은 HTTP 의 GET 메소드 방식만 지원한다.

HTTP 의 다양한 메소드를 테스트 / 사용하는 방법
    > 1. [테스트용] Talend API
    > 2. [JS 개발용] AJAX

웹 서버에 요청 관계
    > 브라우저도 웹 서버도 HTTP 프로토콜을 사용할 수 있어야한다.
    > 브라우저는 기본적으로 HTTP 를 사용하고 웹 서버는 서블릿 클래스를 이용한 HTTP 를 사용한다.
    > http 프로토콜 : http://localhost:8080/day06/servlet
    브라우저(크롬) ------ HTTP 요청 ------> 웹 서버(톰캣)
                get / post / put / delete


스프링 부트
    > 스프링과 스프링 부트는 구성 내용 자체는 다르지 않다.
    > 스프링 부트는 스프링을 조금 더 쉽게 자동으로 설정 세팅 / 관리를 해주는 역할
    > * servlet *, DB, HTML, CSS, JS, JAVA 등의 이해가 필요하다.

    > 스프링
        > 1. POJO(Plain Old JAVA Object) 기반의 경량화된 개발 환경을 제공하는 오픈 소스 프레임워크
            > 무거운 객체가 아닌 JAVA 로 생성한 순수한 객체를 뜻함. -> 오래된 방식의 간단한 JAVA 객체
            > JAVA 를 알면 스프링도 알기 쉽다.(JAVA 객체지향 문법에 충실)
            > 오픈소스 : 누구나 볼 수 있도록 공개한 코드
            > 프레임워크 : 틀 / 뼈대를 제공해서 일정한 규약을 갖고 무언가를 작업하는 일
                > vs 라이브러리 : 도구 제공(미리 만든 클래스 / 인터페이스 / 메소드 제공)
        > 2. 엔터프라이즈 시스템 개발에 필요한 모든 분야를 지원하는 하나의 플랫폼으로 발전됨.
            > 엔터프라이즈(Enterprise) : 복잡하고 정교한 대규모의 모델
        > 3. 대한민국의 전자 정부 표준 프레임워크로 채택됨.
            > 공공부문의 정보화 사업의 플랫폼 기준

    > 스프링 부트
        > 0. * 개발자가 환경 설정은 자동화 or 간소화, 비즈니스 로직(실질적으로 필요한 코딩)에 집중할 수 있도록 함.
        > 1. 복잡한 여러 개의 라이브러리 관리를 하는 xml 방식을 간소화
            > 라이브러리 자동화 도구 : 1. 그래이들(Gradle) 2. 메이븐(Maven)
            > 스프링부트는 기본적으로 모든 빈(Bean) / 인스턴스 설정을 xml 이 아닌 @(어노테이션)으로 처리한다.
        > 2. 톰캣(Tomcat)이라는 웹 서버를 내장하여 복잡한 외적인 환경 설정과 실행을 간소화

        * 인텔리제이(Gradle)에서 한국어가 깨지는 경우
            > 1. 메뉴 -> 파일 -> 설정 -> 검색에 '파일 인코딩'
            > 2. 프로젝트 인코딩 : utf-8, 프로젝트 파일 인코딩 : utf-8
            > 3. 메뉴 -> 도움말 -> 사용자 지정 vm 옵션 편집...
            > 4. 인텔리제이 재실행
                > 그래도 안 될 경우 1. 오타 확인 2. 메뉴 -> 파일 -> 캐시 무효화 -> 옵션 모두 체크 후 -> 다시 시작

    > 스프링 부트의 프로젝트 구조
        > 0. * 순수 JAVA 의 프로젝트와 달리 프로젝트 패키지 구조를 규칙 / 규약 / 약속대로 지켜야 한다.
            > 개발자들과 협업 간의 미리 정해진 규칙 이므로 협업에 용이하다. 대신 자유도가 떨어짐.
        > 1. src -> main -> java : 개발자가 만들 자바 소스파일을 취할 패키지
            > 상위 패키지명은 주로 웹 사이트 주소(URL)를 반대로 한다. ex_ naver.com -> com 패키지(폴더) -> naver 패키지(폴더) -> AppStart : 해당 스프링 부트를 실행하는 클래스
        > 2. resources > static : 정적인 웹 리소스 파일 위치할 패키지, 주로 [HTMl, CSS, JS]
        > 3. resources > application.properties : 프로젝트의 전반적인 설정 / 속성 정보를 작성하는 파일
        > 4. resources > templates : 동적인 웹 리소스 파일 위치할 패키지, 주로 [JSP, 타임리프, 머스테치 등등]
        > 5. build.gradle : 라이브러리들의 의존성 설정 등 프로젝트 전반의 환경을 설정하는 파일

> stream : 데이터가 다니는 통로의 흐름
    > 주로 자바 외 장치와 데이터를 주고 받을 때 사용 ex) 키보드, 파일 처리, JDBC, 네트워크
> Buffer : 특정 위치로 이동하는 동안 일시적으로 데이터를 보관하는 메모리 영역( Stream 에서도 사용 )
> Input  : 자바 안으로 들어온 의미
> Output : 자바 밖으로 나가는 의미

> HTML 에서 첨부파일을 입력받을 때
    > 1. <input type="file"/ id ="file">
    > 2. JS 에서 첨부파일의 value 를 호출하면 document.querySelector("#file").value;
        > "C:\fakepath\업로드한 파일명"
        > JS 는 유저(클라이언트)의 실제 파일 경로를 얻어낼 수 없다. 이것은 브라우저의 법 / 규칙

> 업로드 : 파일 올리기
    > 유저(클라이언트) PC / 모바일의 파일을 서버(스프링 내장 톰캣 서버)로 이동 / 복사
    > 이동 / 복사
        > 대용량 이동 시에는 HTTP 는 byte 형식만 지원

> 다운로드 : 파일 내려받기

> 업로드 구현 방법
    > 1. HTML : <form class = "boardWriteForm">
                <input type = "file" class ="bfile"/>
                </form>
    > 2. Form 전체 HTML 호출
        > JS : let boardWriteForm = document.querySelector(".boardWriteForm");
    > 3. Form 전체 HTML 을 byte 로 변환해주는 기능이 담긴 객체로 변환
        > JS : let boardWriteFormData = new FormData(boardWriteForm);

    > 4. AJAX 대용량 전송 필수 옵션
        > method : post
        > data : boardWriteFormData
        > contentType : false
        > processData : false

> * HTML FORM 과 JAVA 의 BoardDto 필드와 mapping 할 때 주의할 점 : HTML name 속성과 Dto 의 필드명이 동일해야한다.
> * JAVA 에서 대용량 byte 의 타입
    > MultipartFile 인터페이스 : Spring 이 제공하는 라이브러리
        > 주로 대용량 byte 파일을 조작할 때 사용되는 인터페이스

    > 5. MultipartFile
        > 1) 파일 이름 정의, 중복 배제한 식별 가능한 파일명 정의
            > String uuid = UUID.randomUUID().toString();
            > String fileName = multipartFile.getOriginalFilename();
            > fileName = uuid + "_" + fileName.replaceAll("-","_");
        > 2) 업로드할 경로
            > [1] 개발자 폴더 : "C:\\Users\\tj-bu-703-020\\Desktop\\tj_2024A_Spring\\src\\main\\resources\\static\\upload\\";
            > [2] 배포된 서버 폴더 : "C:\\Users\\tj-bu-703-서버 PC\\Desktop\\tj_2024A_Spring\\src\\build\\resources\\static\\upload\\";
        > 3) 업로드, byte 로 된 데이터를 해당 경로에 파일 생성
            > .transferTo(file);

> 다운로드 구현 방법
    > 1. 다운로드 파일의 경로 설정
        > String downLoadPath = uploadPath + filename;
        > File file = new File(downLoadPath);
    > 2. 해당 파일이 존재 했을 때 byte 로 읽기
        > 1) 파일 입력 Stream
            > FileInputStream fin = new FileInputStream(파일경로);
        > 2) 읽어온 byte 를 저장할 배열 생성
            > long fileSize = file.length();
            > byte[] bytes = new byte[(int) fileSize];
        > 3) 파일 입력 Stream 객체를 이용한 byte 읽기
            > fin.read(bytes);
        > 4) Stream 객체 (수동) 제거, JVM 이 대신 해주지만, 안전하게 종료하는 방법
            > fin.close();

    > 3. 읽어온 byte 를 내보내기 (대상 : HTTP 웹 / 앱)(배열에 저장된 바이트를 HTTP 로 응답)
        > 1) HTTP 응답 객체 선언
            > @AutoWired private HttpServletResponse response;
        > 2) HTTP 응답 스트림 호출
            > ServletOutputStream fout = response.getOutputStream();
        > 3) 출력할 배열을 내보내기
            > fout.write(bytes);
        > 4) Stream 객체 제거
            > fout.close();

    > 4. 브라우저의 다운로드 형식을 HTTP header(응답 정보들이 모여있는곳) 보내주기
        > response.setHeader("Content-Disposition","attachment;filename=abc" + URLEncoder.encode(filename.split("_")[1],"utf-8"));

> File 클래스 : 해당 경로의 파일을 객체화해서 다양한 메소드 제공
    > 1. new File(파일 경로); : 해당 경로의 파일 객체 생성
    > 2. .exists()           : 해당 경로의 파일이 존재하면 true, 없으면 false
    > 3. .length()           : 해당 경로의 파일이 존재하면 파일의 용량을 byte 길이 단위로 변환(파일의 용량을 알 수 있다)
